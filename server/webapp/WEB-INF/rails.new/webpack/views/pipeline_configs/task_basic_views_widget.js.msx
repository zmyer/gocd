/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

let m                   = require('mithril');
let f                   = require('helpers/form_helper');
let LookupCommandWidget = require('views/pipeline_configs/lookup_command_widget');

const Argument      = require('models/pipeline_configs/argument');
const AngularPlugin = require('views/shared/angular_plugin');
const tt            = require('helpers/pipeline_configs/tooltips');

const TaskBasicViews = {
  ant: {
    view (vnode) {
      const task = vnode.attrs.task;
      return (
        <div class="task-basic">
          <f.row>
            <f.column largeSize={4}>
              <f.input model={task}
                       attrName="buildFile"
                       label={[
                         "Build file",
                         <f.tooltip tooltip={{content: tt.task.ant.buildFile, size: "small"}} model={task} attrName="buildFile" />
                       ]} />
            </f.column>
            <f.column largeSize={4}>
              <f.input model={task}
                       attrName="target"
                       label={[
                         "Target",
                         <f.tooltip tooltip={{content: tt.task.ant.target, size: "small"}} model={task} attrName="target" />
                       ]} />
            </f.column>
            <f.column largeSize={4} end>
              <f.input model={task}
                       attrName="workingDirectory"
                       label={[
                         "Working directory",
                         <f.tooltip tooltip={{content: tt.task.ant.workingDirectory, size: "small"}} model={task} attrName="workingDirectory" />
                       ]}
                       validate />
            </f.column>
          </f.row>
        </div>
      );
    }
  },

  nant: {
    view (vnode) {
      const task = vnode.attrs.task;
      return (
        <div class="task-basic">
          <f.row>
            <f.column largeSize={4}>
              <f.input model={task}
                       attrName="buildFile"
                       label={[
                         "Build file",
                         <f.tooltip tooltip={{content: tt.task.nant.buildFile}} model={task} attrName="buildFile" />
                       ]} />
            </f.column>
            <f.column largeSize={4}>
              <f.input model={task}
                       attrName="target"
                       label={[
                         "Target",
                         <f.tooltip tooltip={{content: tt.task.nant.target}} model={task} attrName="target" />
                       ]} />
            </f.column>
            <f.column largeSize={4} end>
              <f.input model={task}
                       attrName="workingDirectory"
                       label={[
                         "Working directory",
                         <f.tooltip tooltip={{content: tt.task.nant.workingDirectory, size: "small"}} model={task} attrName="workingDirectory" />
                       ]}
                       validate />
            </f.column>

          </f.row>
          <f.row>
            <f.column largeSize={4} end>
              <f.input model={task}
                       attrName="nantPath"
                       label={[
                         "Nant path",
                         <f.tooltip tooltip={{content: tt.task.nant.path}} model={task} attrName="nantPath" />
                       ]} />
            </f.column>
          </f.row>
        </div>
      );
    }
  },

  exec: {
    view (vnode) {
      const task     = vnode.attrs.task;
      const vm       = Argument.vm(task.args());
      const taskArgs = function () {
        if (task.args().isList()) {
          return (
            <f.column size={8}>
              <f.column size={12}>
                <f.textarea model={vm}
                            attrName="data"
                            label="Args" />
              </f.column>
            </f.column>);
        }
        return (
          <f.column size={8}>
            <f.column lsize={12}>
              <f.input model={vm}
                       attrName="data"
                       label="Args" />
            </f.column>
          </f.column>);
      };

      return (
        <div class="task-basic">
          <f.row collapse>
            <f.column size={4}>
              <f.row>
                <f.column size={12}>
                  <f.input model={task}
                           attrName="command"
                           label={[
                             <span class="required">Command</span>,
                             <f.tooltip tooltip={{content: tt.task.custom.command, size: "small"}} model={task} attrName="command" />
                           ]}
                           validate />
                </f.column>
                <f.column size={12} end>
                  <f.input model={task}
                           attrName="workingDirectory"
                           label={[
                             "Working directory",
                             <f.tooltip tooltip={{content: tt.task.custom.workingDirectory}} model={task} attrName="workingDirectory" />
                           ]}
                           validate />
                </f.column>
              </f.row>
            </f.column>
            {taskArgs()}
          </f.row>
          <LookupCommandWidget model={vnode.attrs.task}/>
        </div>
      );
    }
  },

  rake: {
    view (vnode) {
      const task = vnode.attrs.task;
      return (
        <div class="task-basic">
          <f.row>
            <f.column largeSize={4}>
              <f.input model={task}
                       attrName="buildFile"
                       label={[
                         "Build file",
                         <f.tooltip tooltip={{content: tt.task.rake.buildFile, size: "small"}} model={task} attrName="buildFile" />
                       ]} />
            </f.column>
            <f.column largeSize={4}>
              <f.input model={task}
                       attrName="target"
                       label={[
                         "Target",
                         <f.tooltip tooltip={{content: tt.task.rake.target}} model={task} attrName="target" />
                       ]} />
            </f.column>
            <f.column largeSize={4} end>
              <f.input model={task}
                       attrName="workingDirectory"
                       label={[
                         "Working directory",
                         <f.tooltip tooltip={{content: tt.task.rake.workingDirectory, size: "small"}} model={task} attrName="workingDirectory" />
                       ]}
                       validate />
            </f.column>
          </f.row>
        </div>
      );
    }
  },

  fetch: {
    view (vnode) {
      const task = vnode.attrs.task;
      return (
        <div class="task-basic">
          <f.row>
            <f.column largeSize={4}>
              <f.input model={task}
                       attrName="pipeline"
                       label={[
                         "Pipeline",
                         <f.tooltip tooltip={{content: tt.task.fetchArtifacts.pipeline, size: "large"}} model={task} attrName="pipeline" />
                       ]} />
            </f.column>
            <f.column largeSize={4}>
              <f.input model={task}
                       attrName="stage"
                       label={[
                         <span class="required">Stage</span>,
                         <f.tooltip tooltip={{content: tt.task.fetchArtifacts.stage, size: "small"}} model={task} attrName="stage" />
                       ]}
                       validate />
            </f.column>
            <f.column largeSize={4} end>
              <f.input model={task}
                       attrName="job"
                       label={[
                         <span class="required">Job</span>,
                         <f.tooltip tooltip={{content: tt.task.fetchArtifacts.job, size: "small"}} model={task} attrName="job" />
                       ]}
                       validate />
            </f.column>
          </f.row>
          <f.row>
            <f.column largeSize={4}>
              <f.input model={task}
                       attrName="source"
                       label={[
                         <span class="required">Source</span>,
                         <f.tooltip tooltip={{content: tt.task.fetchArtifacts.source}} model={task} attrName="source" />
                       ]}
                       validate />
            </f.column>
            <f.column largeSize={4}>
              <f.input model={task}
                       attrName="destination"
                       label={[
                         "Destination",
                         <f.tooltip tooltip={{content: tt.task.fetchArtifacts.destination}} model={task} attrName="destination" />
                       ]} />
            </f.column>
            <f.column size={3} end class="align-with-control">
              <f.checkbox model={task}
                          attrName="isSourceAFile"
                          label="Source is a file"
                          class="check" />
            </f.column>
          </f.row>
        </div>
      );
    }
  },

  pluggable_task: { //eslint-disable-line camelcase
    view (vnode) {
      const pluginInfo = vnode.attrs.pluginInfos().findById(vnode.attrs.task.pluginId());
      return (<AngularPlugin pluginInfoSettings={pluginInfo.taskSettings}
                             configuration={vnode.attrs.task.configuration}
                             key={pluginInfo.id()}/>);
    }
  }
};

module.exports = TaskBasicViews;
